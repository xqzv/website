/* ===== assets/css/components.css ===== */
/* Advanced component styles for enhanced functionality */

/* Modern Tech Palette with Three-Color Hierarchy */
/* 
 * Color Usage Hierarchy:
 * Primary (Deep Navy): Main navigation, primary buttons, core elements
 * Secondary (Warm Gold): Secondary buttons, moderate emphasis, hover states
 * Tertiary (Muted Blue-Gray): High-priority CTAs, special highlights, decorative elements
 */
:root {
    --deep-navy: #1E3A8A;
    --steel-blue: #3B82F6;
    --warm-gold: #D7BA89;
    --muted-blue-gray: #8B9EB7;
    --bright-coral: #FF6B6B;
    --slate-gray: #64748B;
    --off-white: #FAFAFB;
    --deep-charcoal: #1F2937;
    --soft-gray: #F1F5F9;
}

/* Loading Animation */
.loading-spinner {
    display: inline-block;
    width: 20px;
    height: 20px;
    border: 2px solid rgba(139, 158, 183, 0.2);
    border-radius: 50%;
    border-top-color: var(--muted-blue-gray);
    animation: spin 1s linear infinite;
}

@keyframes spin {
    to { transform: rotate(360deg); }
}

/* Advanced Button Variants */
.btn-ghost {
    background: transparent;
    color: var(--deep-navy);
    border: 1px solid var(--deep-navy);
    backdrop-filter: blur(10px);
}

.btn-ghost:hover {
    background: var(--deep-navy);
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(30, 58, 138, 0.3);
}

.btn-ghost.secondary {
    color: var(--warm-gold);
    border: 1px solid var(--warm-gold);
}

.btn-ghost.secondary:hover {
    background: var(--warm-gold);
    color: white;
    box-shadow: 0 8px 20px rgba(215, 186, 137, 0.3);
}

.btn-ghost.tertiary {
    color: var(--muted-blue-gray);
    border: 1px solid var(--muted-blue-gray);
}

.btn-ghost.tertiary:hover {
    background: var(--muted-blue-gray);
    color: white;
    box-shadow: 0 8px 20px rgba(139, 158, 183, 0.3);
}

.btn-gradient {
    background: linear-gradient(135deg, var(--deep-navy), var(--steel-blue));
    color: white;
    border: none;
    position: relative;
    overflow: hidden;
}

.btn-gradient-secondary {
    background: linear-gradient(135deg, var(--warm-gold), var(--deep-navy));
    color: white;
    border: none;
    position: relative;
    overflow: hidden;
}

.btn-gradient-tertiary {
    background: linear-gradient(135deg, var(--muted-blue-gray), var(--deep-navy));
    color: white;
    border: none;
    position: relative;
    overflow: hidden;
}

.btn-gradient::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
    transition: left 0.5s;
}

.btn-gradient:hover::before {
    left: 100%;
}

/* Advanced Card Variants */
.card-elevated {
    background: white;
    border-radius: 16px;
    padding: var(--space-xl);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05), 0 10px 25px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(30, 58, 138, 0.05);
    transition: all 400ms cubic-bezier(0.23, 1, 0.320, 1);
}

.card-elevated:hover {
    transform: translateY(-8px) scale(1.02);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1), 0 30px 60px rgba(30, 58, 138, 0.1);
}

.card-glassmorphism {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 20px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
}

/* Progress Bars */
.progress-bar {
    width: 100%;
    height: 6px;
    background: var(--soft-gray);
    border-radius: 3px;
    overflow: hidden;
    margin: var(--space-sm) 0;
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, var(--deep-navy), var(--steel-blue));
    border-radius: 3px;
    transition: width 2s ease-in-out;
    width: 0%;
}

.progress-fill.secondary {
    background: linear-gradient(90deg, var(--warm-gold), var(--deep-navy));
}

.progress-fill.tertiary {
    background: linear-gradient(90deg, var(--muted-blue-gray), var(--steel-blue));
}

/* Skill Level Indicators */
.skill-level {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin: var(--space-sm) 0;
}

.skill-dots {
    display: flex;
    gap: 4px;
}

.skill-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--soft-gray);
    transition: background-color 0.3s ease;
}

.skill-dot.filled {
    background: var(--deep-navy);
}

.skill-dot.filled.secondary {
    background: var(--warm-gold);
}

.skill-dot.filled.tertiary {
    background: var(--muted-blue-gray);
}

/* Timeline Component */
.timeline {
    position: relative;
    padding-left: var(--space-xl);
}

.timeline::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 2px;
    background: linear-gradient(to bottom, var(--deep-navy), var(--steel-blue));
}

.timeline.secondary::before {
    background: linear-gradient(to bottom, var(--warm-gold), var(--deep-navy));
}

.timeline.tertiary::before {
    background: linear-gradient(to bottom, var(--muted-blue-gray), var(--deep-navy));
}

.timeline-item {
    position: relative;
    margin-bottom: var(--space-xl);
    padding-left: var(--space-lg);
}

.timeline-item::before {
    content: '';
    position: absolute;
    left: -var(--space-lg);
    top: 8px;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: var(--deep-navy);
    border: 3px solid var(--off-white);
    box-shadow: 0 0 0 3px var(--deep-navy);
}

.timeline.secondary .timeline-item::before {
    background: var(--warm-gold);
    box-shadow: 0 0 0 3px var(--warm-gold);
}

.timeline.tertiary .timeline-item::before {
    background: var(--muted-blue-gray);
    box-shadow: 0 0 0 3px var(--muted-blue-gray);
}

/* Statistics Cards */
.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--space-lg);
    margin: var(--space-2xl) 0;
}

.stat-card {
    text-align: center;
    padding: var(--space-xl);
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    border-top: 4px solid var(--deep-navy);
}

.stat-card.secondary {
    border-top: 4px solid var(--warm-gold);
}

.stat-card.secondary .stat-number {
    color: var(--warm-gold);
}

.stat-card.tertiary {
    border-top: 4px solid var(--muted-blue-gray);
}

.stat-card.tertiary .stat-number {
    color: var(--muted-blue-gray);
}

.stat-number {
    font-size: var(--text-4xl);
    font-weight: 700;
    color: var(--deep-navy);
    display: block;
    margin-bottom: var(--space-xs);
}

.stat-label {
    color: var(--text-secondary);
    font-size: var(--text-sm);
    text-transform: uppercase;
    letter-spacing: 0.5px;
    font-weight: 500;
}

/* Animated Counter */
.counter {
    font-variant-numeric: tabular-nums;
}

/* Interactive Elements */
.hover-lift {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.hover-lift:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
}

.hover-glow {
    transition: box-shadow 0.3s ease;
}

.hover-glow:hover {
    box-shadow: 0 0 20px rgba(30, 58, 138, 0.3);
}

.hover-glow.secondary:hover {
    box-shadow: 0 0 20px rgba(215, 186, 137, 0.4);
}

.hover-glow.tertiary:hover {
    box-shadow: 0 0 20px rgba(139, 158, 183, 0.4);
}

/* Scroll Indicators */
.scroll-indicator {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 4px;
    background: var(--soft-gray);
    z-index: 1000;
}

.scroll-progress {
    height: 100%;
    background: linear-gradient(90deg, var(--muted-blue-gray), var(--warm-gold));
    width: 0%;
    transition: width 0.1s ease;
}

/* Modal Component */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.6);
    backdrop-filter: blur(8px);
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
}

.modal-overlay.active {
    opacity: 1;
    visibility: visible;
}

.modal {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0.8);
    background: white;
    border-radius: 16px;
    padding: var(--space-2xl);
    max-width: 600px;
    width: 90%;
    max-height: 90vh;
    overflow-y: auto;
    transition: transform 0.3s ease;
}

.modal-overlay.active .modal {
    transform: translate(-50%, -50%) scale(1);
}

/* Notification Toast */
.toast {
    position: fixed;
    top: 20px;
    right: 20px;
    background: var(--muted-blue-gray);
    color: white;
    padding: var(--space-sm) var(--space-lg);
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transform: translateX(400px);
    transition: transform 0.3s ease;
    z-index: 1001;
}

.toast.show {
    transform: translateX(0);
}

.toast.success {
    background: #10B981;
}

.toast.error {
    background: #EF4444;
}

.toast.warning {
    background: #F59E0B;
}

/* Dark Mode Support */
@media (prefers-color-scheme: dark) {
    :root {
        --off-white: #1a1a1a;
        --soft-gray: #2d2d2d;
        --text-primary: #ffffff;
        --text-secondary: #a0a0a0;
        --text-tertiary: #666666;
    }
    
    .card, .card-elevated, .project-card {
        background: #2d2d2d;
        border-color: rgba(255, 255, 255, 0.1);
    }
    
    .skill-category {
        background: #2d2d2d;
    }
    
    .nav {
        background: rgba(26, 26, 26, 0.95);
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }
}

/* Print Styles */
@media print {
    .nav, .mobile-menu, .btn, .modal-overlay {
        display: none;
    }
    
    .hero {
        min-height: auto;
        padding-top: 0;
    }
    
    .section {
        padding: var(--space-lg) 0;
    }
    
    .project-card, .card {
        break-inside: avoid;
        box-shadow: none;
        border: 1px solid #ddd;
    }
}

/* High Contrast Mode */
@media (prefers-contrast: high) {
    :root {
        --muted-blue-gray: #000000;
        --text-primary: #000000;
        --text-secondary: #000000;
    }
    
    .btn-primary {
        background: #000000;
        border: 2px solid #000000;
    }
    
    .card, .project-card {
        border: 2px solid #000000;
    }
}

/* Animation Performance */
@media (prefers-reduced-motion: reduce) {
    .lazy-load,
    .hover-lift,
    .hover-glow,
    .btn,
    .project-card,
    .card-elevated {
        animation: none;
        transition: none;
    }
}

/* ===== assets/js/main.js ===== */
/**
 * Advanced Portfolio Website JavaScript
 * Handles enhanced interactions and performance optimizations
 */

class PortfolioWebsite {
    constructor() {
        this.init();
    }

    init() {
        this.setupSmoothScrolling();
        this.setupScrollProgress();
        this.setupLazyLoading();
        this.setupNavigation();
        this.setupAnimations();
        this.setupFormHandling();
        this.setupPerformanceOptimizations();
        this.setupAccessibility();
    }

    // Smooth Scrolling with offset calculation
    setupSmoothScrolling() {
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', (e) => {
                e.preventDefault();
                const target = document.querySelector(anchor.getAttribute('href'));
                if (target) {
                    const navHeight = document.querySelector('.nav')?.offsetHeight || 0;
                    const targetPosition = target.offsetTop - navHeight - 20;
                    
                    window.scrollTo({
                        top: targetPosition,
                        behavior: 'smooth'
                    });
                }
            });
        });
    }

    // Scroll Progress Indicator
    setupScrollProgress() {
        const progressIndicator = this.createElement('div', 'scroll-indicator', [
            this.createElement('div', 'scroll-progress')
        ]);
        document.body.appendChild(progressIndicator);

        const progressBar = progressIndicator.querySelector('.scroll-progress');
        
        window.addEventListener('scroll', () => {
            const scrollPercent = (window.scrollY / 
                (document.documentElement.scrollHeight - window.innerHeight)) * 100;
            progressBar.style.width = Math.min(scrollPercent, 100) + '%';
        });
    }

    // Enhanced Lazy Loading with Intersection Observer
    setupLazyLoading() {
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('loaded');
                    
                    // Animate progress bars
                    const progressBars = entry.target.querySelectorAll('.progress-fill');
                    progressBars.forEach(bar => {
                        const percentage = bar.dataset.percentage || '0%';
                        bar.style.width = percentage;
                    });

                    // Animate counters
                    const counters = entry.target.querySelectorAll('.counter');
                    counters.forEach(counter => {
                        this.animateCounter(counter);
                    });

                    observer.unobserve(entry.target);
                }
            });
        }, observerOptions);

        document.querySelectorAll('.lazy-load').forEach(el => {
            observer.observe(el);
        });
    }

    // Navigation Enhancement
    setupNavigation() {
        const nav = document.querySelector('.nav');
        let lastScrollY = window.scrollY;

        window.addEventListener('scroll', () => {
            const currentScrollY = window.scrollY;
            
            // Background opacity based on scroll
            if (currentScrollY > 100) {
                nav.style.background = 'rgba(254, 252, 248, 0.98)';
                nav.style.boxShadow = '0 2px 20px rgba(139, 69, 19, 0.1)';
            } else {
                nav.style.background = 'rgba(254, 252, 248, 0.95)';
                nav.style.boxShadow = 'none';
            }

            // Hide/show nav on scroll direction
            if (currentScrollY > lastScrollY && currentScrollY > 200) {
                nav.style.transform = 'translateY(-100%)';
            } else {
                nav.style.transform = 'translateY(0)';
            }
            
            lastScrollY = currentScrollY;
        });

        // Active section highlighting
        this.highlightActiveSection();
    }

    // Highlight active navigation section
    highlightActiveSection() {
        const sections = document.querySelectorAll('section[id]');
        const navLinks = document.querySelectorAll('.nav-link');

        window.addEventListener('scroll', () => {
            const scrollPosition = window.scrollY + 100;

            sections.forEach(section => {
                const sectionTop = section.offsetTop;
                const sectionHeight = section.offsetHeight;
                const sectionId = section.getAttribute('id');

                if (scrollPosition >= sectionTop && 
                    scrollPosition < sectionTop + sectionHeight) {
                    navLinks.forEach(link => {
                        link.classList.remove('active');
                        if (link.getAttribute('href') === `#${sectionId}`) {
                            link.classList.add('active');
                        }
                    });
                }
            });
        });
    }

    // Advanced Animations
    setupAnimations() {
        // Parallax effect for hero section
        const hero = document.querySelector('.hero');
        if (hero) {
            window.addEventListener('scroll', () => {
                const scrolled = window.pageYOffset;
                const parallax = scrolled * 0.5;
                hero.style.transform = `translateY(${parallax}px)`;
            });
        }

        // Hover effects for project cards
        document.querySelectorAll('.project-card').forEach(card => {
            card.addEventListener('mouseenter', (e) => {
                const rect = card.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                
                card.style.setProperty('--mouse-x', x + 'px');
                card.style.setProperty('--mouse-y', y + 'px');
            });
        });
    }

    // Form Handling with Validation
    setupFormHandling() {
        const form = document.querySelector('form');
        if (form) {
            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const formData = new FormData(form);
                const data = Object.fromEntries(formData);
                
                // Validate form
                if (this.validateForm(data)) {
                    await this.submitForm(data);
                }
            });

            // Real-time validation
            form.querySelectorAll('input, textarea').forEach(field => {
                field.addEventListener('blur', () => {
                    this.validateField(field);
                });
            });
        }
    }

    // Form Validation
    validateForm(data) {
        let isValid = true;
        
        // Email validation
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(data.email)) {
            this.showFieldError('email', 'Please enter a valid email address');
            isValid = false;
        }

        // Name validation
        if (data.name.trim().length < 2) {
            this.showFieldError('name', 'Name must be at least 2 characters');
            isValid = false;
        }

        // Message validation
        if (data.message.trim().length < 10) {
            this.showFieldError('message', 'Message must be at least 10 characters');
            isValid = false;
        }

        return isValid;
    }

    // Field Validation
    validateField(field) {
        const value = field.value.trim();
        let isValid = true;

        switch (field.type) {
            case 'email':
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                isValid = emailRegex.test(value);
                break;
            case 'text':
                isValid = value.length >= 2;
                break;
            default:
                isValid = value.length >= 10;
        }

        if (isValid) {
            field.classList.remove('error');
            this.removeFieldError(field.name);
        } else {
            field.classList.add('error');
        }

        return isValid;
    }

    // Show Field Error
    showFieldError(fieldName, message) {
        const field = document.querySelector(`[name="${fieldName}"]`);
        this.removeFieldError(fieldName);
        
        const errorDiv = this.createElement('div', 'field-error', [
            document.createTextNode(message)
        ]);
        
        field.parentNode.appendChild(errorDiv);
        field.classList.add('error');
    }

    // Remove Field Error
    removeFieldError(fieldName) {
        const field = document.querySelector(`[name="${fieldName}"]`);
        const existingError = field.parentNode.querySelector('.field-error');
        if (existingError) {
            existingError.remove();
        }
        field.classList.remove('error');
    }

    // Form Submission (placeholder)
    async submitForm(data) {
        const submitButton = document.querySelector('button[type="submit"]');
        const originalText = submitButton.textContent;
        
        submitButton.disabled = true;
        submitButton.innerHTML = `
            <span class="loading-spinner"></span>
            Sending...
        `;

        try {
            // Simulate API call
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            this.showToast('Message sent successfully!', 'success');
            document.querySelector('form').reset();
        } catch (error) {
            this.showToast('Failed to send message. Please try again.', 'error');
        } finally {
            submitButton.disabled = false;
            submitButton.textContent = originalText;
        }
    }

    // Performance Optimizations
    setupPerformanceOptimizations() {
        // Preload critical resources
        this.preloadCriticalResources();
        
        // Optimize images
        this.optimizeImages();
        
        // Service Worker for caching (if needed)
        if ('serviceWorker' in navigator) {
            // Register service worker for offline functionality
        }
    }

    // Preload Critical Resources
    preloadCriticalResources() {
        const criticalResources = [
            'https://fonts.googleapis.com/css2?family=Inter:wght@300..700&display=swap',
            // Add other critical resources
        ];

        criticalResources.forEach(resource => {
            const link = document.createElement('link');
            link.rel = 'preload';
            link.href = resource;
            link.as = 'style';
            document.head.appendChild(link);
        });
    }

    // Image Optimization
    optimizeImages() {
        const images = document.querySelectorAll('img[data-src]');
        
        const imageObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const img = entry.target;
                    img.src = img.dataset.src;
                    img.removeAttribute('data-src');
                    imageObserver.unobserve(img);
                }
            });
        });

        images.forEach(img => imageObserver.observe(img));
    }

    // Accessibility Enhancements
    setupAccessibility() {
        // Keyboard navigation
        this.setupKeyboardNavigation();
        
        // ARIA attributes
        this.setupAriaAttributes();
        
        // Focus management
        this.setupFocusManagement();
    }

    // Keyboard Navigation
    setupKeyboardNavigation() {
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Tab') {
                document.body.classList.add('keyboard-navigation');
            }
            
            if (e.key === 'Escape') {
                // Close any open modals or menus
                this.closeAllModals();
            }
        });

        document.addEventListener('mousedown', () => {
            document.body.classList.remove('keyboard-navigation');
        });
    }

    // ARIA Attributes
    setupAriaAttributes() {
        // Add missing ARIA labels
        document.querySelectorAll('button, a').forEach(element => {
            if (!element.hasAttribute('aria-label') && 
                !element.textContent.trim() && 
                element.querySelector('svg')) {
                element.setAttribute('aria-label', 'Interactive element');
            }
        });
    }

    // Focus Management
    setupFocusManagement() {
        // Skip links
        const skipLink = this.createElement('a', 'skip-link', [
            document.createTextNode('Skip to main content')
        ]);
        skipLink.href = '#main';
        document.body.insertBefore(skipLink, document.body.firstChild);
    }

    // Utility Functions
    createElement(tag, className, children = []) {
        const element = document.createElement(tag);
        if (className) element.className = className;
        children.forEach(child => element.appendChild(child));
        return element;
    }

    // Animate Counter
    animateCounter(element) {
        const target = parseInt(element.dataset.target) || 
                      parseInt(element.textContent.replace(/[^0-9]/g, ''));
        const duration = 2000;
        const start = performance.now();
        const startValue = 0;

        const animate = (currentTime) => {
            const elapsed = currentTime - start;
            const progress = Math.min(elapsed / duration, 1);
            
            const current = Math.floor(startValue + (target - startValue) * progress);
            element.textContent = element.dataset.suffix ? 
                current + element.dataset.suffix : current;

            if (progress < 1) {
                requestAnimationFrame(animate);
            }
        };

        requestAnimationFrame(animate);
    }

    // Toast Notifications
    showToast(message, type = 'info') {
        const toast = this.createElement('div', `toast ${type}`, [
            document.createTextNode(message)
        ]);
        
        document.body.appendChild(toast);
        
        // Trigger animation
        requestAnimationFrame(() => {
            toast.classList.add('show');
        });

        // Auto remove
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => toast.remove(), 300);
        }, 4000);
    }

    // Close All Modals
    closeAllModals() {
        document.querySelectorAll('.modal-overlay').forEach(overlay => {
            overlay.classList.remove('active');
        });
    }
}

// Initialize the portfolio website
document.addEventListener('DOMContentLoaded', () => {
    new PortfolioWebsite();
});

// Performance monitoring
window.addEventListener('load', () => {
    // Log Core Web Vitals
    if ('performance' in window) {
        const paintMetrics = performance.getEntriesByType('paint');
        console.log('Performance metrics:', paintMetrics);
    }
});